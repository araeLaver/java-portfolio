# Java 포트폴리오 배포 문제 해결 과정 요약

## 발생했던 문제들과 해결 과정

### 1. Tailwind CSS 4.x 빌드 오류
문제: npm error could not determine executable to run
원인: Tailwind CSS 4.x 베타 버전의 실행 파일 문제
해결: 안정적인 3.x 버전으로 다운그레이드 → 최종적으로 CSS 빌드 단계 제거

### 2. Maven wrapper 권한 문제  
문제: bash: line 1: ./mvnw: Permission denied
원인: Git에서 실행 권한이 제대로 추적되지 않음
해결: git update-index --chmod=+x mvnw + render.yaml에 chmod +x 추가

### 3. Java 환경 문제
문제: bash: line 1: java: command not found
      ./mvnw: 45: /bin/java: not found
원인: Render의 Java 환경 설정 문제
해결: Docker 환경으로 전환

### 4. Maven wrapper JAR 손상
문제: no main manifest attribute, in /app/.mvn/wrapper/maven-wrapper.jar
원인: 손상된 Maven wrapper JAR 파일
해결: Docker에서 시스템 Maven 사용으로 우회

### 5. Docker 이미지 태그 오류
문제: maven:3.9.6-openjdk-17-slim: not found
원인: 잘못된 Docker 이미지 태그
해결: maven:3.9.6-eclipse-temurin-17로 수정

### 6. JAR 리소스 로딩 실패
문제: ResourceUtils.getFile() - FileNotFoundException
원인: JAR 내부 파일을 파일 시스템 경로로 접근 시도
해결: ClassPathResource + InputStream 사용

## 최종 해결책

Docker 기반 배포 + Spring 표준 리소스 로딩
- Maven wrapper 문제 완전 우회
- Java 환경 보장  
- JAR 호환 리소스 접근

## 최종 설정 파일들

### Dockerfile
```dockerfile
FROM maven:3.9.6-eclipse-temurin-17
WORKDIR /app
COPY pom.xml .
RUN mvn dependency:go-offline -B
COPY src src
RUN mvn clean package -DskipTests -B
EXPOSE 8080
CMD ["java", "-Dserver.port=${PORT:-8080}", "-jar", "target/portfolio-app-0.0.1-SNAPSHOT.jar"]
```

### render.yaml
```yaml
services:
  - type: web
    name: java-portfolio
    env: docker
    plan: free
    dockerfilePath: ./Dockerfile
    envVars:
      - key: PORT
        value: 8080
```

### ProjectService.java 주요 수정
```java
// 변경 전 (문제 코드)
this.projectFile = ResourceUtils.getFile("classpath:projects.json");

// 변경 후 (해결 코드)  
this.projectResource = new ClassPathResource("projects.json");
try (InputStream inputStream = projectResource.getInputStream()) {
    // 파일 읽기
}
```

## 핵심 교훈

1. Maven wrapper보다 시스템 Maven이 Docker에서 더 안정적
2. JAR 환경에서는 ResourceUtils.getFile() 대신 ClassPathResource 사용 필수
3. Docker가 복잡한 환경 설정 문제를 단순화해줌
4. Render에서 Java 프로젝트는 Docker 환경이 가장 안정적

## 배포 성공 결과

- Docker 빌드: 성공
- Maven 패키징: 성공  
- Spring Boot 실행: 성공
- 웹사이트 접근: 정상 동작

문제 해결 완료! 🚀